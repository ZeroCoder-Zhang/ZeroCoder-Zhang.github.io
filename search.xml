<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.8——函数递归</title>
      <link href="/2024/10/22/C%E8%AF%AD%E8%A8%80/vlog8/"/>
      <url>/2024/10/22/C%E8%AF%AD%E8%A8%80/vlog8/</url>
      
        <content type="html"><![CDATA[<h1 id="递归的介绍"><a href="#递归的介绍" class="headerlink" title="递归的介绍"></a>递归的介绍</h1><p>在 vlog.2 的 printf 函数的返回值举例中，我们使用多次递归的方式实现了同一个函数的返回值调用，但这只是一个简易的递归，不算真正意义上的递归，那么什么是递归？</p><blockquote><p>在C语言中，<strong>递归就是函数自己调用自己</strong>，如果函数的递归没有限制条件，一直无限循环调用下去，代码最终就会陷入死循环，导致<strong>栈溢出</strong>（Stack overflow）</p></blockquote><p>递归就是递推的意思，递归的思考方式就是将<strong>大事化小</strong>，将复杂的程序化成简单的代码格式，也就是化成一个个子问题求解，知道子程序不再被分解，递归就结束了</p><h1 id="递归的限制条件"><a href="#递归的限制条件" class="headerlink" title="递归的限制条件"></a>递归的限制条件</h1><p>值得注意的是，递归也存在限制条件</p><blockquote><p>• 递归存在限制条件，当满足这个限制条件的时候，递归便不再继续<br>• 每次递归调用之后越来越接近这个限制条件</p></blockquote><h1 id="递归实战应用"><a href="#递归实战应用" class="headerlink" title="递归实战应用"></a>递归实战应用</h1><h2 id="求-n-的阶乘"><a href="#求-n-的阶乘" class="headerlink" title="求 n 的阶乘"></a>求 n 的阶乘</h2><blockquote><p>由数学知识可知：n！&#x3D; n ∗ (n−1)! 当 n &#x3D;&#x3D; 0 的时候，此时 n 的阶乘是 1 ，n &gt; 0时阶乘可根据公式计算</p></blockquote><p>那么我们可以写出阶乘函数 Fact ，Fact(n) 是求 n 的阶乘，那么Fact(n-1)就是求 n-1 的阶乘<br>此处不考虑 n 过大导致栈溢出的情况，只考虑合理范围内的 n</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Fact</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> n*Fact(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> ret = Fact(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序的递归思想可以根据画图很容易的理解<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/6a92e64b2dfae4900123d936d65d22d.png" alt="在这里插入图片描述"></p><h2 id="顺序打印一个整数的每一位"><a href="#顺序打印一个整数的每一位" class="headerlink" title="顺序打印一个整数的每一位"></a>顺序打印一个整数的每一位</h2><p>输入⼀个整数m，按照顺序打印整数的每⼀位<br>如果n是⼀位数，n的每⼀位就是n自己<br>n是超过1位数的话，就得拆分每⼀位<br>比如：</p><blockquote><p>1234%10就能得到4，然后1234&#x2F;10得到123，这就相当于去掉了4<br>然后继续对123%10，就得到了3，再除10去掉3，以此类推<br>不断的 %10 和 &#x2F;10 操作，直到1234的每一位都得到<br>但是这里有个问题就是得到的数字顺序是倒着的</p></blockquote><p>假设我们用函数Print(n)打印n的每一位<br>那么我们知道1234 % 10 &#x3D; 4，1234 &#x2F; 10 &#x3D; 123</p><blockquote><p> Print(1234)就可以拆分为两步：</p><ol><li>Print(1234&#x2F;10)  &#x2F;&#x2F;打印123的每⼀位 </li><li>printf(1234%10) &#x2F;&#x2F;打印4</li></ol></blockquote><p>以此类推,利用递归思想</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   Print(<span class="number">1234</span>)</span><br><span class="line">==&gt;Print(<span class="number">123</span>)                   +<span class="built_in">printf</span>(<span class="number">4</span>)</span><br><span class="line">==&gt;Print(<span class="number">12</span>)          + <span class="built_in">printf</span>(<span class="number">3</span>)</span><br><span class="line">==&gt;Print(<span class="number">1</span>) + <span class="built_in">printf</span>(<span class="number">2</span>)</span><br><span class="line">==&gt;<span class="built_in">printf</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>直到被打印的数字变成一位数的时候，就不需要再拆分，递归结束：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Print</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&gt;<span class="number">9</span>)</span><br><span class="line">  &#123;</span><br><span class="line">     Print(n/<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, n%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    Print(m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的函数不断地调用，当函数调用完之后依次从最后一个子程序往第一个程序打印</p><h1 id="递归与迭代"><a href="#递归与迭代" class="headerlink" title="递归与迭代"></a>递归与迭代</h1><p> Fact函数是可以产生正确的结果，但是在递归函数调用的过程中涉及一些运行时的开销</p><blockquote><p>在C语言中每一次函数调用，都需要为本次函数调用在内存的栈区，申请一块内存空间来保存函数调<br>用期间的各种局部变量的值，这块空间被称为运行时堆栈，或者函数栈帧。<br>函数不返回，函数对应的栈帧空间就⼀直占用，所以如果函数调用中存在递归调用的话，每⼀次递归<br>函数调用都会开辟属于自己的栈帧空间，直到函数递归不再继续，开始回归，才逐层释放栈帧空间，<br>所以如果采用函数递归的方式完成代码，递归层次太深，就会浪费太多的栈帧空间，也可能引起栈溢<br>出的问题，而且也很耗时间（后期将推出函数栈帧专题）</p></blockquote><p>通常如果使用递归不合适，就可以使用迭代的方式，那什么是迭代呢？<br>迭代简单来讲就是用循环的方式运行</p><p>举个例子：求第 n 个斐波那契数<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/44bf3109470c7c32176d1af9f53cc0b.png" alt="在这里插入图片描述"><br>如果使用的是递归的方法的话，层次会非常深，冗余的计算会非常多</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> <span class="title function_">Fib</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(n == <span class="number">3</span>)</span><br><span class="line">     count++;<span class="comment">//统计第3个斐波那契数被计算的次数</span></span><br><span class="line"> <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">return</span> Fib(n<span class="number">-1</span>)+Fib(n<span class="number">-2</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"> <span class="type">int</span> ret = Fib(n);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;count = %d\n&quot;</span>, count);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>根据 count 的次数，在计算第40个斐波那契数的时候，使用递归方式，第3个斐波那契数就被重复计算了39088169次，这些计算是非常冗余的。所以斐波那契数的计算，使用递归是非常不明智的，我们就得想迭代的方式解决</p><p>那么迭代的话</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Fib</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"> <span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"> <span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">while</span>(n&gt;<span class="number">2</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> c = a+b;</span><br><span class="line"> a = b;</span><br><span class="line"> b = c;</span><br><span class="line"> n--;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> c;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>不难看出，似乎用迭代的方式去实现这个代码，效率就要高出很多了，但同时我们也不要一直使用，会容易出现程序错误</p><h1 id="递归经典问题的拓展"><a href="#递归经典问题的拓展" class="headerlink" title="递归经典问题的拓展"></a>递归经典问题的拓展</h1><p>青蛙跳台阶问题<br>汉诺塔问题</p><p>这两个问题将在下一期vlog拓展推出，欢迎大家看我的下一期推文</p><h1 id="希望读者们多多三连支持"><a href="#希望读者们多多三连支持" class="headerlink" title="希望读者们多多三连支持"></a>希望读者们多多三连支持</h1><h1 id="小编会继续更新"><a href="#小编会继续更新" class="headerlink" title="小编会继续更新"></a>小编会继续更新</h1><h1 id="你们的鼓励就是我前进的动力！"><a href="#你们的鼓励就是我前进的动力！" class="headerlink" title="你们的鼓励就是我前进的动力！"></a>你们的鼓励就是我前进的动力！</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/dd9199b39808c8738b61b5e84036f4d.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.7——数组函数实践</title>
      <link href="/2024/10/20/C%E8%AF%AD%E8%A8%80/vlog7/"/>
      <url>/2024/10/20/C%E8%AF%AD%E8%A8%80/vlog7/</url>
      
        <content type="html"><![CDATA[<p>扫雷游戏专题</p><p>掌握了前面的数组与函数的知识，我们可以制作一款大多电脑上都有的简易版经典小游戏——扫雷<br>游戏要求：<br>1.游戏使用菜单可以选择继续游玩或退出游戏<br>2.扫雷为 9 * 9 格子的棋盘<br>3.默认随机布置 10 个雷<br>4.排查雷：<br>如果该位置不是雷，就显示周围有几个雷<br>如果该位置是雷，就炸死游戏结束<br>把除 10 个雷以外的空格都找出来就算游戏胜利<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/98fe0980f23405fa352481ac087957c.png" alt="在这里插入图片描述"></p><h1 id="扫雷游戏的设计分析"><a href="#扫雷游戏的设计分析" class="headerlink" title="扫雷游戏的设计分析"></a>扫雷游戏的设计分析</h1><h2 id="棋盘"><a href="#棋盘" class="headerlink" title="棋盘"></a>棋盘</h2><p>在扫雷过程中，布置的雷和排查出的雷的信息要分别存储在两个棋盘上<br>因为我们需要在9<em>9的棋盘上布置雷的信息和排查雷，我们首先想到的就是创建⼀个9</em>9的数组来存放信息<br>如果这个位置是雷，我们就存放字  1 ，不是雷就存放  0<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/52cdf6b358f3b8c4c2fdf1b3fe212a3.png" alt="在这里插入图片描述"><br>假设我们排查（2，1）这个坐标，访问周围一圈8个蓝色的位置，查获一个雷</p><p>假设我们排查（5，8）这个坐标，访问周围一圈8个蓝色的位置，最下面三个坐标会越界<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/570ae017a400b6eb6b2a596ef06353c.png" alt="在这里插入图片描述"><br>为了防止越界的情况出现，在设计的时候，我们将数组扩大一圈，雷还是布置在原来的地方，周围一圈空在那儿就行了，所以我们将存放数据的数组创建成11*11是比较合适<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/d0c74b3d0d2ca33b77210d8eb71b0a0.png" alt="在这里插入图片描述"><br>再接着，假设我们排查了某个位置，这个坐标处不是雷，这个坐标的周围有1个雷，那我们需要将排查出的雷的数量信息记录存储，并打印出来，作为排雷的重要参考信息的，那这个雷的个数信息存放在哪里呢？如果存放在布置雷的数组中，这样雷的信息和雷的个数信息就可能产生混淆和打印上的困难</p><p>解决办法：<br>雷和非雷的信息不要使用数字，使用字符就行，这样就避免冲突了，但是这样做棋盘上有雷和非雷的信息，还有排查出的雷的个数信息，就比较混杂，不够方便</p><p>这里我们采用另外⼀种方案，我们专门给⼀个棋盘（对应一个数组mine）存放布置好的雷的信息，再<br>给另外一个棋盘（对应另外一个数组show）存放排查出的雷的信息，这样就互不干扰了，把雷布置到<br>mine数组，在mine数组中排查雷，排查出的数据存放在show数组，并且打印show数组的信息给后期<br>排查参考</p><p>同时为了保持神秘，show数组开始时初始化为字符  ‘ * ‘ ，为了保持两个数组的类型⼀致，可以使用同一<br>套函数处理，mine数组最开始也初始化为字符 ‘ 0 ‘ ，布置雷改成 ‘ 1 ‘<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/a9949132f774a195516a186169845d1.png" alt="在这里插入图片描述"></p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>为了游戏的代码清晰明辨，根据函数的声明和定义，设计三个文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.c <span class="comment">//⽂件中写游戏的测试逻辑  </span></span><br><span class="line">game.c <span class="comment">//⽂件中写游戏中函数的实现等</span></span><br><span class="line">game.h <span class="comment">//⽂件中写游戏需要的数据类型和函数声明等</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="扫雷游戏的实现"><a href="#扫雷游戏的实现" class="headerlink" title="扫雷游戏的实现"></a>扫雷游戏的实现</h1><p><strong>game.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> EASY_COUNT 10</span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> ROW 9</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> COL 9</span></span><br><span class="line"> </span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> ROWS ROW+2</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> COLS COL+2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化棋盘</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">char</span> <span class="built_in">set</span>)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//打印棋盘</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//布置雷</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//排查雷</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>game.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">char</span> <span class="built_in">set</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">         <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">         &#123;</span><br><span class="line">              <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">              &#123;</span><br><span class="line">                    board[i][j] = <span class="built_in">set</span>;</span><br><span class="line">              &#125;</span><br><span class="line">         &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="type">int</span>  i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-------扫雷游戏-------\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= col; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">                <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, board[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="comment">//布置10个雷</span></span><br><span class="line">        <span class="comment">//⽣成随机的坐标，布置雷</span></span><br><span class="line">        <span class="type">int</span> count = EASY_COUNT;</span><br><span class="line">        <span class="keyword">while</span> (count)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="type">int</span> x = rand() % row + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> y = rand() % col + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (board[x][y] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        board[x][y] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                        count--;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="type">int</span> <span class="title function_">GetMineCount</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="keyword">return</span> (mine[x<span class="number">-1</span>][y]+mine[x<span class="number">-1</span>][y<span class="number">-1</span>]+mine[x][y - <span class="number">1</span>]+mine[x+<span class="number">1</span>][y<span class="number">-1</span>]</span><br><span class="line">        +mine[x+<span class="number">1</span>][y]+mine[x+<span class="number">1</span>][y+<span class="number">1</span>]+mine[x][y+<span class="number">1</span>]+mine[x<span class="number">-1</span>][y+<span class="number">1</span>] - <span class="number">8</span> * <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> win = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (win &lt;row*col- EASY_COUNT)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输⼊要排查的坐标:&gt;&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你被炸死了\n&quot;</span>);</span><br><span class="line">                                DisplayBoard(mine, ROW, COL);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="comment">//该位置不是雷，就统计这个坐标周围有⼏个雷</span></span><br><span class="line">                                <span class="type">int</span> count = GetMineCount(mine, x, y);</span><br><span class="line">                                show[x][y] = count + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                                DisplayBoard(show, ROW, COL);</span><br><span class="line">                                win++;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;坐标⾮法，重新输⼊\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (win == row * col - EASY_COUNT)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，排雷成功\n&quot;</span>);</span><br><span class="line">                DisplayBoard(mine, ROW, COL);</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>test.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;*****   1. play   *****\n&quot;</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;*****   0. exit   *****\n&quot;</span>);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="type">char</span> mine[ROWS][COLS];<span class="comment">//存放布置好的雷</span></span><br><span class="line">       <span class="type">char</span> show[ROWS][COLS];<span class="comment">//存放排查出的雷的信息</span></span><br><span class="line">       <span class="comment">//初始化棋盘</span></span><br><span class="line">       <span class="comment">//1. mine数组最开始是全&#x27;0&#x27;         </span></span><br><span class="line">       <span class="comment">//2. show数组最开始是全&#x27;*&#x27; </span></span><br><span class="line">       InitBoard(mine, ROWS, COLS, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">       InitBoard(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">       <span class="comment">//打印棋盘</span></span><br><span class="line">       <span class="comment">//DisplayBoard(mine, ROW, COL);</span></span><br><span class="line">       DisplayBoard(show, ROW, COL);</span><br><span class="line">       <span class="comment">//1. 布置雷 </span></span><br><span class="line">       SetMine(mine, ROW, COL);</span><br><span class="line">       <span class="comment">//DisplayBoard(mine, ROW, COL);</span></span><br><span class="line">       <span class="comment">//2. 排查雷 </span></span><br><span class="line">       FindMine(mine, show, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">       <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">       srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">       <span class="keyword">do</span></span><br><span class="line">       &#123;</span><br><span class="line">               menu();</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;请选择:&gt;&quot;</span>);</span><br><span class="line">               <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">               <span class="keyword">switch</span> (input)</span><br><span class="line">               &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                       game();</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;退出游戏\n&quot;</span>);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                       <span class="built_in">printf</span>(<span class="string">&quot;选择错误，重新选择\n&quot;</span>);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (input);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="扫雷游戏的扩展"><a href="#扫雷游戏的扩展" class="headerlink" title="扫雷游戏的扩展"></a>扫雷游戏的扩展</h1><p>是否可选择游戏难度？<br>是否可标记雷？<br>是否可加上排雷时间显示？<br>如果排查位置不是雷，周围也没有雷，可以展开周围的一片</p><p>以上拓展就不过多展示，可以根据前边所学知识自行拓展<br>在线扫雷游戏：<a href="http://www.minesweeper.cn/">http://www.minesweeper.cn/</a></p><h1 id="希望读者们多多三连支持"><a href="#希望读者们多多三连支持" class="headerlink" title="希望读者们多多三连支持"></a>希望读者们多多三连支持</h1><h1 id="小编会继续更新"><a href="#小编会继续更新" class="headerlink" title="小编会继续更新"></a>小编会继续更新</h1><h1 id="你们的鼓励就是我前进的动力！"><a href="#你们的鼓励就是我前进的动力！" class="headerlink" title="你们的鼓励就是我前进的动力！"></a>你们的鼓励就是我前进的动力！</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/6ce74d252551be3ce82eea65707eb91.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.6——函数</title>
      <link href="/2024/10/18/C%E8%AF%AD%E8%A8%80/vlog6/"/>
      <url>/2024/10/18/C%E8%AF%AD%E8%A8%80/vlog6/</url>
      
        <content type="html"><![CDATA[<p>函数在我们小学就开始接触，比如：一次函数 y &#x3D; kx + b<br>在C语言中也引入了数学中的函数概念，也叫做子程序，<strong>C语言中的函数就是⼀个完成某项特定的任务的⼀小段代码</strong>，程序其实就是由多个子程序组合而成，提升了开发软件的效率</p><h1 id="函数的介绍"><a href="#函数的介绍" class="headerlink" title="函数的介绍"></a>函数的介绍</h1><h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><p>C语言中规定了各种法则，C语言本身并不提供库函数，但编译器厂商根据国际标准的ANSIC规定的一些函数标准给出了一些函数，这些函数就被称为<strong>库函数</strong></p><p>前面我们学过的printf，scanf等都是库函数中现成的可以直接使用的函数，这些函数方便了程序员对代码功能的实现，一定程度上提升了效率性和保障性</p><p>学习库函数的各种函数对一名合格的程序员来说很重要<br>这是两个学习网站：<br><strong>C&#x2F;C++官方的链接：<a href="https://zh.cppreference.com/w/c/header">https://zh.cppreference.com/w/c/header</a><br>cplusplus.com：<a href="https://legacy.cplusplus.com/reference/clibrary/">https://legacy.cplusplus.com/reference/clibrary/</a></strong></p><p>网站函数的学习形式：</p><ol><li>函数原型</li><li>函数功能介绍</li><li>参数和返回类型说明</li><li>代码举例</li><li>代码输出</li><li>相关知识链接</li></ol><p>注意：库函数是在标准库中对应的头文件中声明的，所以库函数的使用，务必包含对应的头文件，不包含是可能会出现⼀些问题的</p><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>光有库函数提供的函数远远不足以实现所有的代码功能，所以程序员自行写了许多函数以实现各种功能，这种代码就叫做<strong>自定义函数</strong>，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ret_type <span class="title function_">fun_name</span><span class="params">(形式参数)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>• ret_type 是函数返回类型</strong><br>有时候可以是void，表示什么都不返回，当不需要返回数值时，也可以不写返回值的类型</p><p><strong>• fun_name 是函数名</strong><br>函数的名字与其功能相关联，所以函数起名时要根据其功能起有意义的名字，便于程序员解读</p><p><strong>• 括号中放的是形式参数</strong><br>参数要交代清楚类型，名字和参数个数</p><p><strong>• {}括起来的是函数体</strong><br>也就是函数完成功能实现的过程</p><h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>举个简单的例子：写一个加法函数，完成两个数字的相加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">//输⼊</span></span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"> <span class="comment">//调⽤加法函数，完成a和b的相加</span></span><br><span class="line"> <span class="comment">//求和的结果放在r中</span></span><br><span class="line"> <span class="comment">//to do</span></span><br><span class="line"> <span class="type">int</span> ret = Add(a,b)</span><br><span class="line"> <span class="comment">//输出</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>• a 和 b 为函数的实参</strong><br>实参就是真实传递给函数的参数</p><p><strong>• x 和 y 为函数的形参</strong><br>形参只在形式上存在，并不会一直存在，只有在调用函数时向内存申请空间，使用完函数后形参又被销毁</p><p><strong>• 形参和实参各自是独立的空间</strong><br>在VS2022的监视窗口上可以观察到<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/d5387da4bbcac33364b3f09756a407f.png" alt="在这里插入图片描述"><br>x和y确实得到了a和b的值，但是x和y的地址和a和b的地址是不⼀样的<br>所以我们可以理解为形参是实参的⼀份临时拷贝，这叫做<strong>传值调用</strong>（后面在指针部分会详细介绍）</p><h2 id="数组做函数参数"><a href="#数组做函数参数" class="headerlink" title="数组做函数参数"></a>数组做函数参数</h2><p>举个例子：写⼀个函数将⼀个整型数组的内容，全部置为0，再写⼀个函数打印数组的内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sz; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> arr[i] = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> sz)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sz; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"> <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"> set_arr(arr, sz);<span class="comment">//设置数组内容为-1</span></span><br><span class="line"> print_arr(arr, sz);<span class="comment">//打印数组内容</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的set_arr函数要能够对数组内容进行设置，就得把数组作为参数传递给函数，同时函数内部在设<br>置数组每个元素的时候，也得遍历数组，需要知道数组的元素个数。所以我们需要给set_arr传递2个参<br>数，⼀个是数组，另外⼀个是数组的元素个数，仔细分析print_arr也是⼀样的，只有拿到了数组和元<br>素个数，才能遍历打印数组的每个元素</p><p>• 函数的形式参数要和函数的实参<strong>个数匹配</strong></p><p>• 函数的实参是数组，形参也是可以写成<strong>数组形式</strong>的</p><p>• 形参如果是一维数组，<strong>数组大小可以省略不写</strong></p><p>• 形参如果是二维数组，<strong>行可以省略，但是列不能省略</strong></p><p>• 数组传参，<strong>形参是不会创建新的数组的</strong></p><p>• 形参操作的数组和实参的数组是<strong>同一个数组</strong></p><h1 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h1><p>在使用函数的时候，比如 main 函数， 自定义的 Add 函数常常需要返回值，也就是 <strong>return 语句</strong></p><p>• return 后边可以是⼀个数值，也可以是⼀个表达式，如果是表达式则先执行表达式，再返回表达式的结果</p><p>• return 后边也可以什么都没有，直接写 return，这种写法适合函数返回类型是 void 的情况</p><p>• return 返回的值和函数返回类型不⼀致，系统会⾃动将返回的值隐式转换为函数的返回类型</p><p>• return 语句执行后，函数就彻底返回，后边的代码不再执行</p><p>• 如果函数中存在 if 等分支的语句，则要保证每种情况下都有 return 返回，否则会出现编译错误</p><h1 id="嵌套调用和链式访问"><a href="#嵌套调用和链式访问" class="headerlink" title="嵌套调用和链式访问"></a>嵌套调用和链式访问</h1><p><strong>嵌套调用</strong>就是函数间的相互调用，函数间的有效相互调用才实现了大型程序<br>举个例子：假设我们计算某年某月有多少天？如果要函数实现，可以设计2个函数</p><p>• is_leap_year()：根据年份确定是否是闰年</p><p>• get_days_of_month()：调用 is_leap_year 确定是否是闰年后，再根据月计算这个月的天数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">if</span>(((y%<span class="number">4</span>==<span class="number">0</span>)&amp;&amp;(y%<span class="number">100</span>!=<span class="number">0</span>))||(y%<span class="number">400</span>==<span class="number">0</span>))</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get_days_of_month</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> days[] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"> <span class="type">int</span> day = days[m];</span><br><span class="line"> <span class="keyword">if</span> (is_leap_year(y) &amp;&amp; m == <span class="number">2</span>)</span><br><span class="line"> day += <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;y, &amp;m);</span><br><span class="line"> <span class="type">int</span> d = get_days_of_month(y, m);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>链式访问</strong>就是将一个函数的返回值作为另外一个函数的参数，像链条一样函数串起来就是函数的链式访问<br>举个有趣的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">43</span>)));</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解该代码的关键是理解 printf 的返回值是啥？<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/ed4bc9c57e3d3895e4bc91e19070812.png" alt="在这里插入图片描述"><br>printf函数返回的是打印在屏幕上的字符的个数<br>我们就第⼀个printf打印的是第⼆个printf的返回值，第二个printf打印的是第三个printf的返回值<br>第三个printf打印43，在屏幕上打印2个字符，再返回2<br>第二个printf打印2，在屏幕上打印1个字符，再放回1<br>第一个printf打印1<br>所以屏幕上最终打印：4321</p><h1 id="函数的声明和定义"><a href="#函数的声明和定义" class="headerlink" title="函数的声明和定义"></a>函数的声明和定义</h1><h2 id="单个文件和多个文件"><a href="#单个文件和多个文件" class="headerlink" title="单个文件和多个文件"></a>单个文件和多个文件</h2><p><strong>单个文件</strong>中，还是上面闰年的例子，int is_leap_year 是函数的定义，int ret &#x3D; is_leap_year 是函数的调用</p><p>如果把 is_leap_year 函数放在main函数后面呢？<br>is_leap_year 函数调用的时候，并没有发现前面有 is_leap_year 的定义，就会报警告</p><p>那么如何让解决呢？<br>就是函数调用之前先声明一下 is_leap_year 这个函数，声明函数只要交代清楚：函数名，函数的返回类型和函数的参数就行了</p><p>上面闰年的例子就是正确的写法</p><p><strong>多个文件</strong>中，一般在企业中我们写代码时候，代码可能比较多，不会将所有的代码都放在一个文件中，我们往往会根据程序的功能，将代码拆分放在多个文件中一般情况下，函数的声明、类型的声明放在头文件（.h）中，函数的实现是放在源文件（.c）文件中</p><h2 id="static-和-extern"><a href="#static-和-extern" class="headerlink" title="static 和 extern"></a>static 和 extern</h2><p>在C语言中，static 和 extern 是关键字<br>static ：静态的意思，用于<strong>修饰全局变量，局部变量，函数</strong><br>extern ：用于<strong>声明外部符号</strong></p><p>这里拓展几个名词：<br><strong>作用域</strong>：⼀段程序代码中所用到的名字并不总是有效可用的<br>而限定这个名字的可用性的代码范围就是这个名字的作用域</p><p><strong>生命周期</strong>：变量的创建(申请内存)到变量的销毁(收回内存)之间的⼀个时间段</p><ol><li>局部变量的生命周期是：进入作用域变量创建，生命周期开始，出作用域生命周期结束</li><li>全局变量的生命周期是：整个程序的生命周期</li></ol><p>举个static修饰<strong>局部变量</strong>的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> i++;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> test();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从运行结果来看，打印了5个1，局部变量 i 每次进入 test 函数时都会重新定义，也就是重新创建再释放内存，如果我们不想让 i 出函数时被销毁，我们就在 int i &#x3D; 0 前面加上 static ，那么此时 i 出函数的时候是不会销毁的，重新进入函数也就不会重新创建变量，直接上次累积的数值继续计算</p><p>static修饰局部变量改变了变量的生命周期，生命周期改变的本质是改变了变量的存储类型，本<br>来⼀个局部变量是存储在内存的栈区的，但是被 static 修饰后存储到了静态区，存储在静态区的变<br>量和全局变量是⼀样的，生命周期就和程序的生命周期⼀样了，只有程序结束，变量才销毁，内存才<br>回收，但是作用域不变</p><p>举个static修饰<strong>全局变量</strong>的例子：</p><p>add.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> g_val = <span class="number">2018</span>;</span><br></pre></td></tr></table></figure><p>test.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_val;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, g_val);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>extern 是用来<strong>声明外部符号</strong>的，如果⼀个全局的符号在A文件中定义的，在B文件中想使用，就可以使用 extern 进行声明，然后使用</p><p>如果在 int g_val &#x3D; 2018 前加个 static 在编译的时候会出现链接性错误，全局变量被 static 修饰之后，外部链接属性就变成了内部链接属性，只能在自己所在的源文件内部使用了，其他源文件，即使声明了，也是无法正常使用的（ <strong>static 修饰函数同理</strong>）</p><h1 id="希望读者们多多三连支持"><a href="#希望读者们多多三连支持" class="headerlink" title="希望读者们多多三连支持"></a>希望读者们多多三连支持</h1><h1 id="小编会继续更新"><a href="#小编会继续更新" class="headerlink" title="小编会继续更新"></a>小编会继续更新</h1><h1 id="你们的鼓励就是我前进的动力！"><a href="#你们的鼓励就是我前进的动力！" class="headerlink" title="你们的鼓励就是我前进的动力！"></a>你们的鼓励就是我前进的动力！</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/49c3020ede9a2b4405501955e8cf92e.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.5——数组</title>
      <link href="/2024/10/16/C%E8%AF%AD%E8%A8%80/vlog5/"/>
      <url>/2024/10/16/C%E8%AF%AD%E8%A8%80/vlog5/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的介绍"><a href="#数组的介绍" class="headerlink" title="数组的介绍"></a>数组的介绍</h1><p>数组简单理解就是一组相同类型元素的集合<br>注意：<br>• 数组中存放的是1个或者多个数据，但是数组元素个数不能为0<br>• 数组中存放的多个数据，类型是相同的<br>• 数组分为一维数组和多维数组，常见多维数组为二维数组<br>• 数组可以没有初始值，也可以没有大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr1;</span><br><span class="line"><span class="type">int</span> arr2[] = &#123;<span class="number">0</span>&#125;<span class="comment">//大小为1</span></span><br></pre></td></tr></table></figure><h1 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h1><h2 id="一维数组的创建与初始化"><a href="#一维数组的创建与初始化" class="headerlink" title="一维数组的创建与初始化"></a>一维数组的创建与初始化</h2><p>一维数组其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type arr_name[常量值];</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//[]内是元素个数，&#123;&#125;内是初始化的元素</span></span><br></pre></td></tr></table></figure><p>type 可以是 char、float、double等等，也可以是自定义类型的数据<br>数组去掉其数组名剩下的就是数组的类型，比如：int arr1[10] ，arr1数组的类型是 int [10]</p><p>一维数组的<strong>完全初始化</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>一维数组的<strong>不完全初始化</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr2[<span class="number">6</span>] = &#123;<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><p>第一个元素初始化为1，其余元素初始化为0</p><p>一维数组的<strong>错误初始化</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr3[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>超出初始化元素的个数</p><p>注意：若 [ ] 内不写个数是可以的，该数组的元素个数根据 { } 的初始化决定</p><h2 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h2><p>数组是有下标的，假设有一组数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br></pre></td></tr></table></figure><p>那它的数组和下标对应关系为<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/8107b3d10af7dee889c0b10df7c5423.png" alt="在这里插入图片描述"><br>所以C语言为了便于访问数组中的元素，创建了一个操作符 [ ] ，叫<strong>下引用操作符</strong><br>比如我们访问第五个元素，可以使用 arr[4] 访问</p><p>使用循环可以对数组进行打印：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;; </span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想要知道数组中元素的个数呢？<br>那此时我们可以使用C语言中的一个关键字 sizeof 计算类型或变量的大小<br>那只要计算出一个元素所占字节的个数，数组的元素个数就能算出来<br>这里我们选择第⼀个元素算大小就可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stido.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="type">int</span> sz = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sz);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> sizeof(arr) 为数组大小， sizeof(arr[0]) 为数组一个元素的大小，这两相除即为元素个数</p><h2 id="一维数组的存储"><a href="#一维数组的存储" class="headerlink" title="一维数组的存储"></a>一维数组的存储</h2><p>要了解一维数组在内存中的存储，我们可以依次打印其各个元素的地址进行观察：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;; </span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d] = %p\n &quot;</span>, i, &amp;arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/edd4b39ecd2f6ac1b917f71b07ccd29.png" alt="在这里插入图片描述"><br>从代码的运行结果来看每个数组地址之间相差4个字节，由此可知<strong>一维数组在内存中是连续存放的</strong></p><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><h2 id="二维数组的创建与初始化"><a href="#二维数组的创建与初始化" class="headerlink" title="二维数组的创建与初始化"></a>二维数组的创建与初始化</h2><p>数组的元素都是内置类型的<br>如果我们把⼀维数组做为数组的元素，这时候就是<strong>二维数组</strong><br>二维数组作为数组元素的数组被称为<strong>三维数组</strong>，二维数组以上的数组统称为<strong>多维数组</strong></p><p>二维数组其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type arr_name[常量值<span class="number">1</span>][常量值<span class="number">2</span>]；</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>这里的3表示数组有3行，5表示每行有5个元素</p><p>二维数组的<strong>完全初始化</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr3[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br></pre></td></tr></table></figure><p>12345为第一行，23456为第二行，34567为第三行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr4[<span class="number">3</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>12000为第一行，34000为第二行，56000为第三行</p><p>二维数组的<strong>不完全初始化</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr1[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><p>第一行初始化为12000，第二、三行都为0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr5[][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr6[][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">int</span> arr7[][<span class="number">5</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>,<span class="number">4</span>&#125;, &#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>初始化时省略行，但是不能省略列</p><h2 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h2><p>C语言规定，二维数组的行是从0开始的，列也是从0开始的，假设有一数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br></pre></td></tr></table></figure><p>那它的数组和下标对应关系为<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/1ac3f24d1e6882aac0a9c2bbcd7156c.png" alt="在这里插入图片描述"><br>访问二维数组的单个元素我们知道了，那如何打印整个二维数组呢？<br>其实我们只要能够按照⼀定的规律产生所有的行和列的数字就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) <span class="comment">//产⽣⾏号</span></span><br><span class="line">     &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++) <span class="comment">//产⽣列号</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]); <span class="comment">//输出数据</span></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组的存储"><a href="#二维数组的存储" class="headerlink" title="二维数组的存储"></a>二维数组的存储</h2><p>像一维数组⼀样，我们如果想研究⼆维数组在内存中的存储方式，我们也是可以打印出数组所有元素的地址的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> arr[<span class="number">3</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">     <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d][%d] = %p\n&quot;</span>, i, j, &amp;arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/c7e26c7de9da82673fd9817d7b9adca.png" alt="在这里插入图片描述"><br>从代码运行结果来看，每个元素的地址间也是相隔4个字节，所以<strong>二维数组中的每个元素都是连续存放的</strong>，像一维数组那样一字排开存储</p><h1 id="C99中的变长数组"><a href="#C99中的变长数组" class="headerlink" title="C99中的变长数组"></a>C99中的变长数组</h1><p>在C99标准之前，C语言在创建数组的时候，数组大小的指定只能使用常量、常量表达式，或者如果我<br>们初始化数据的话，可以省略数组大小，这样的语法限制，让我们创建数组就不够灵活，有时候数组大了浪费空间，有时候数组小了不够用</p><p>于是C99中给了一个<strong>变长数组</strong>的新特性，允许我们使用变量指定数组大小，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = a+b;</span><br><span class="line"><span class="type">int</span> arr[n];</span><br></pre></td></tr></table></figure><p>数组 arr 就是变长数组，它的长度取决于变量 n 的值，编译器没法事先确定，只有运行时才能知道n是多少</p><p>变长数组的根本特征，就是数组长度只有运行时才能确定，所以变长数组不能初始化，它的好处是程<br>序员不必在开发时，随意为数组指定⼀个估计的长度，程序可以在运行时为数组分配精确的长度</p><p>遗憾的是在VS2022上，虽然支持大部分C99的语法，没有支持C99中的变长数组</p><h1 id="希望读者们多多三连支持"><a href="#希望读者们多多三连支持" class="headerlink" title="希望读者们多多三连支持"></a>希望读者们多多三连支持</h1><h1 id="小编会继续更新"><a href="#小编会继续更新" class="headerlink" title="小编会继续更新"></a>小编会继续更新</h1><h1 id="你们的鼓励就是我前进的动力！"><a href="#你们的鼓励就是我前进的动力！" class="headerlink" title="你们的鼓励就是我前进的动力！"></a>你们的鼓励就是我前进的动力！</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/af4c592ff65877f0c42d49814f0f71c.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.4——分支和循环（下）</title>
      <link href="/2024/10/14/C%E8%AF%AD%E8%A8%80/vlog4/"/>
      <url>/2024/10/14/C%E8%AF%AD%E8%A8%80/vlog4/</url>
      
        <content type="html"><![CDATA[<p>猜数字游戏专题</p><p>掌握了前面学习的vlog的知识，尤其是分支与循环，我们可以写一个经典有趣的游戏：猜数字<br>游戏要求：<br>1.电脑自动生成1~100的随机数<br>2.玩家猜数字，程序根据玩家猜的数字，做出猜大了或猜小了的判断，直到玩家猜对为止</p><h1 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h1><h2 id="rand"><a href="#rand" class="headerlink" title="rand"></a>rand</h2><p>rand是C语言中的一种函数，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rand</span> <span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><p> rand 会返回一个随机数，这个随机数的范围在0~RAND_MAX（理论值）之间<br>使用该函数需要包括头文件**#include &lt;stdlib.h&gt;**</p><p>实际上我们多次运行只有 rand 函数的程序会发现，每次打印的随机数都相同，其实只有 rand 函数返回的是一个<strong>伪随机数</strong>，真正的随机数是无法预测下一个数是多少的， rand 函数是基于一个叫 “<strong>种子</strong>” 的基准值生成随机数，种子默认值为1，所以我们想生成完全随机的数，要让种子时刻处于变化状态</p><h2 id="srand"><a href="#srand" class="headerlink" title="srand"></a>srand</h2><p>srand 也是C语言中的一种函数，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">srand</span> <span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seed）；</span></span><br></pre></td></tr></table></figure><p> srand 会初始化随机数的生成器，调用 rand 函数前要调用 srand 函数，通过 srand 函数的参数seed来设置rand函数生成随机数的时候的种子，只要种子在变化，每次生成的随机数序列也就变化起来了<br>那也就是说 srand 的种子如果是随机的， rand 就能生成随机数</p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>易知时间是在时刻发生变化的，所以我们可以将时间作为种子来使用<br> time 就是C语言中的一个时间函数，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">time_t</span> <span class="title function_">time</span> <span class="params">(<span class="type">time_t</span>* timer)</span>;</span><br></pre></td></tr></table></figure><p>time 函数会返回当前的日历时间，其实返回的是1970年1月1日0时0分0秒到现在程序运行时间之间的<br>差值，单位是秒，返回的类型是<strong>time_t类型</strong>的，time_t 类型本质上其实就是32位或者64位的整型类型</p><p>time 函数的参数 timer 如果是非NULL的指针的话，函数也会将这个返回的差值放在 timer 指向的内存中带回去，如果 timer 是NULL，就只返回这个时间的差值，time 函数返回的这个时间差也被叫做：时间戳, time 函数的时候需要包含头文件：**#include &lt;time.h&gt;**</p><p>于是完整的生成随机数代码可以这样写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand());</span><br></pre></td></tr></table></figure><p>srand函数是不需要频繁调用的，⼀次运行的程序中调用⼀次就够了</p><h2 id="随机数的范围"><a href="#随机数的范围" class="headerlink" title="随机数的范围"></a>随机数的范围</h2><p>生成0~99之间的随机数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand() % <span class="number">100</span>;<span class="comment">//余数的范围是0~99</span></span><br></pre></td></tr></table></figure><p>生成1~100之间的随机数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand()%<span class="number">100</span>+<span class="number">1</span>;<span class="comment">//%100的余数是0~99,0~99的数字+1,范围是1~100</span></span><br></pre></td></tr></table></figure><p>生成100~200之间的随机数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> + rand()%(<span class="number">200</span><span class="number">-100</span>+<span class="number">1</span>)<span class="comment">//余数的范围是0~100，加100后就是100~200</span></span><br></pre></td></tr></table></figure><p>生成a~b之间的随机数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + rand()%(b-a+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="猜数字游戏的实现"><a href="#猜数字游戏的实现" class="headerlink" title="猜数字游戏的实现"></a>猜数字游戏的实现</h1><p>首先设置主要的菜单界面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">     srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> &#123;</span><br><span class="line">     menu();</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;请选择:&gt;&quot;</span>);</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">     <span class="keyword">switch</span> (input)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          game();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;游戏结束\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;选择错误，重新选择\n&quot;</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125; <span class="keyword">while</span> (input);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;****** 1. play ******\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;****** 0. exit ******\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设计主要的猜数字代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> r = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">     <span class="type">int</span> guess= <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;请猜数字&gt;:&quot;</span>);</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">       <span class="keyword">if</span>(guess &lt; r)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;猜⼩了\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(guess &gt; r)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;猜⼤了\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，猜对了\n&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，丰富游戏玩法我们还可以加上猜的次数，自定义函数game可修改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">int</span> r = rand() % <span class="number">100</span> + <span class="number">1</span>;</span><br><span class="line">     <span class="type">int</span> guess = <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> count = <span class="number">5</span>;</span><br><span class="line">     <span class="keyword">while</span> (count)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;\n你还有%d次机会\n&quot;</span>, count);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;请猜数字&gt;:&quot;</span>);</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">       <span class="keyword">if</span> (guess &lt; r)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜⼩了\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (guess &gt; r)</span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜⼤了\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，猜对了\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     count--;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;你失败了，正确值是:%d\n&quot;</span>, r);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后要注意把两个自定义函数 game 和 menu 放在主函数前<br>或者在主函数前加上 void mean() 和 void game() 进行<strong>函数声明</strong> (后面会讲) </p><h1 id="希望读者们多多三连支持"><a href="#希望读者们多多三连支持" class="headerlink" title="希望读者们多多三连支持"></a>希望读者们多多三连支持</h1><h1 id="小编会继续更新"><a href="#小编会继续更新" class="headerlink" title="小编会继续更新"></a>小编会继续更新</h1><h1 id="你们的鼓励就是我前进的动力！"><a href="#你们的鼓励就是我前进的动力！" class="headerlink" title="你们的鼓励就是我前进的动力！"></a>你们的鼓励就是我前进的动力！</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/3f51b4b4c496208dcc5e4624edf8b88.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.3——分支和循环（上）</title>
      <link href="/2024/10/12/C%E8%AF%AD%E8%A8%80/vlog3/"/>
      <url>/2024/10/12/C%E8%AF%AD%E8%A8%80/vlog3/</url>
      
        <content type="html"><![CDATA[<p>C语言的结构分为顺序结构、选择结构、循环结构，结构化程序设计离不开这三种结构或这三种结构的组合，合理快速的运用这些结构是学好C语言的基础</p><h1 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h1><p> if 语句，显而易见是如果的意思，通过判断真假来确认语句是否执行，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 表达式 )</span><br><span class="line"> 语句</span><br></pre></td></tr></table></figure><p> 表达式内语句为真，则语句执行，表达式内语句为假，则语句不执行，会直接跳过该语句<br> 在C语言中，0表示为假，非0表示为真<br> <img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/26a9bc676522b65c11c209750b3aacc.png" alt="在这里插入图片描述"><br>如果判断一个事物的正反面写两个 if 语句，就太麻烦了，这里就需要用到 if…else… 语句了<br>例如：输入⼀个年龄，&gt;&#x3D; 18岁就输出：成年，否则就输出：未成年</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line"> <span class="keyword">if</span>(age&gt;=<span class="number">18</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;成年\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;未成年\n&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 if 和 else 语句中都默认只控制一条语句，还是上面的例子，如果想要既打出”<strong>成年</strong>“，又想打出”<strong>可以谈恋爱了</strong>“,那就需要用大括号将两个 printf 输出语句括起来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line"> <span class="keyword">if</span>(age &gt;= <span class="number">18</span>) <span class="comment">//if 后使⽤&#123;&#125; 控制多条语句-这个块也叫：程序块，或者复合语句</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;成年了\n&quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;可以谈恋爱了\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果在 if 语句中嵌套 if 语句呢，这叫做<strong>嵌套 if</strong> ，但是如果连着多个 if 语句嵌套的话，会显得代码特别复杂不易理解，而且花括号多了，检查代码时也很难一一对应不遗漏，所以可以使用 <strong>else if</strong> ，就省去了嵌套的麻烦<br>例如：输入⼀个整数，判断输入的整数是0，还是正数或者负数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"> <span class="keyword">if</span>(num == <span class="number">0</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;输⼊的数字是0\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; <span class="number">0</span>) <span class="comment">//这⾥的if 相当于嵌套在else语句中，形成了嵌套结构</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;输⼊的数字是正数\n&quot;</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;输⼊的数字是负数\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意，如果 else 语句前有多个 if  ，可以记住这样⼀条规则， <strong>else 总是跟最接近的 if 匹配</strong>，相当于前面的 if 语句都被悬空了，这就是悬空else问题<br>如果希望else确实和第⼀个if匹配，可以如下例子这样子操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"> <span class="keyword">if</span>(a == <span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(b == <span class="number">2</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分支与循环操作符"><a href="#分支与循环操作符" class="headerlink" title="分支与循环操作符"></a>分支与循环操作符</h1><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p>用于比较的操作符称为<strong>关系表达式</strong></p><p>• &gt; 大于运算符<br>• &lt; 小于运算符<br>• &gt;&#x3D; 大于等于运算符<br>• &lt;&#x3D; 小于等于运算符<br>• &#x3D;&#x3D; 相等运算符<br>• !&#x3D; 不相等运算符</p><p>关系表达式通常返回 0 或 1 ，表示真假，比如， 20 &gt; 12 返回 1 ， 12 &gt; 20 返回 0<br>注意不要把相等运算符 &#x3D;&#x3D; 和赋值运算符 &#x3D; 弄混</p><p><strong>要避免多个运算符连用</strong>，举个例子： i &lt; j &lt; k<br>这是个合法表达，但不能保证 j 在 i 和 k 之间，这是因为关系运算符是从左往右运算，即 (i &lt; j) &lt; k<br>所以应改为这种写法 i &lt; j &amp;&amp; j &lt; k</p><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h2><p>条件操作符也叫三目操作符，需要接受三个操作数，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp1 ? exp2 : exp3</span><br></pre></td></tr></table></figure><p>如果 exp1 为真， exp2 计算，计算的结果是整个表达式的结果；如果<br>exp1 为假， exp3 计算，计算的结果是整个表达式的结果</p><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h2><p>逻辑运算符用于逻辑的判断</p><p>• ! ：逻辑取反运算符（改变单个表达式的真假）<br>• &amp;&amp; ：逻辑与运算符，就是并且的意思（<strong>两侧的表达式都为真，则为真，否则为假</strong>）<br>• || ：逻辑或运算符，就是或者的意思（<strong>两侧至少有⼀个表达式为真，则为真，否则为假</strong>）</p><p>C语言的逻辑运算有个特点，就是优先对左侧的表达式求值，再对表达式右边的值求值<br>如果左边的表达式满足逻辑运算符的条件，就不再对右边的表达式求值，这种情况称为<strong>短路</strong></p><h1 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h1><p> switch 语句用于实现分支结构，在循环结构中相当于 else if<br> 使用 switch 能够更好解读代码，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">case</span> value1: statement</span><br><span class="line"> <span class="keyword">case</span> value2: statement</span><br><span class="line"> <span class="keyword">default</span>: statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句会依次执行 case 分支，如果找不到对应的分支语句，就执行 default 语句<br>注意：<br>• switch 后的 expression 必须是<strong>整型表达式</strong><br>• case 后的值，必须是<strong>整形常量表达式</strong></p><p>举个例子：输入任意⼀个整数值，计算除3之后的余数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"> <span class="keyword">switch</span>(n%<span class="number">3</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;整除，余数为0\n&quot;</span>); </span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;余数是1\n&quot;</span>); </span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;余数是2\n&quot;</span>); </span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>• case 和后边的数字之间必须有空格<br>• 每⼀个 case 语句中的代码执行完成后，需要加上 break ，才能跳出这个switch语句，否则会继续执行别的语句，就达不到我们想要的分支效果了<br>• default 在语句中没有顺序要求，通常把 default 放最后更符合逻辑</p><h1 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h1><p>while 语句也是一种常用的循环语句，while 语句的语法结构和 if 语句非常相似<br>举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>); <span class="comment">//while后边的条件满⾜，死循环的打印hehe</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先上来就是执行判断表达式，表达式的值为0，循环直接结束；表达式的值不为0，则执行循环语<br>句，语句执行完后再继续判断，是否进行下⼀次判断<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/f20cbbda52d46b5c6e2d74c57d871b9.png" alt="在这里插入图片描述"></p><h1 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h1><p>for 循环在循环结构中是最常使用的，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>; 表达式<span class="number">2</span>; 表达式<span class="number">3</span>)</span><br><span class="line"> 语句；<span class="comment">//如果循环体想包含更多的语句，可以加上⼤括号</span></span><br></pre></td></tr></table></figure><p>表达式1 用于循环变量的初始化<br>表达式2 用于循环结束条件的判断<br>表达式3 用于循环变量的调整</p><p>举个例子：计算1~100之间3的倍数的数字之和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line"> sum += i;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先执行表达式1：初始化循环变量，接下来就是执行表达式2：判断，表达式2的结果如果&#x3D;&#x3D;0，则循环结束<br>表达式2的结果如果!&#x3D;0则执行循环语句，循环语句执行完后，再去执行表达式3：调整循环<br>然后再去表达式2的地方执行判断，表达式2的结果是否为0，决定循环是否继续</p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/67d275e42a5e7713bf44cdb77e93b46.png" alt="在这里插入图片描述"><br>整个过程中表达式1：初始化只被执行过一次</p><h1 id="do-while循环语句"><a href="#do-while循环语句" class="headerlink" title="do-while循环语句"></a>do-while循环语句</h1><p>do-while 语句在循环结构中使用的最少，其语法形式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line"> 语句；</span><br><span class="line"><span class="keyword">while</span>(表达式)；</span><br></pre></td></tr></table></figure><p>举个例子：在屏幕上打印1~10的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">do</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line"> i = i + <span class="number">1</span>;</span><br><span class="line"> &#125;<span class="keyword">while</span>(i&lt;=<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先执行 do 里的语句，然后判断表达式<br>判断表达式的结果是!&#x3D;0，则继续循环，执行循环语句；判断表达式的结果 &#x3D;&#x3D; 0，则循环结束</p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/55608d99ffdd1528aa1b5a45bb3f199.png" alt="在这里插入图片描述"></p><h1 id="break和continue语句"><a href="#break和continue语句" class="headerlink" title="break和continue语句"></a>break和continue语句</h1><p>在循环执行的过程中，如果某些状况发生的时候，需要提前终止循环，这是非常常见的现象。C语言中<br>提供了 break 和 continue 两个关键字，就是应用到循环中的。</p><p>• break 的作用是用于永久的终止循环，只要 break 被执行，直接就会跳出循环，继续往后执行<br>• continue 的作用是跳过本次循环中 continue 后边的代码， for 循环中直接跳到循环调整部分，while 循环直接跳到循环判断部分</p><h1 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h1><p>goto 语句可以实现在同⼀个函数内跳转到设置好的标号处<br>举个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hehe\n&quot;</span>);</span><br><span class="line"> <span class="keyword">goto</span> next;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;haha\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">next:</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;跳过了haha的打印\n&quot;</span>); </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>goto 语句如果使用的不当，就会导致在函数内部随意乱跳转，打乱程序的执行流程，所以我们的建<br>议是能不用尽量不去使用；但是 goto 语句也不是一无是处，在多层循环的代码中，如果想快速跳出<br>使用 goto 就非常的方便了<br>比如本来 for 循环想提前退出得使用 break ，⼀个 break 只能跳出⼀层 for 循环，如果3层循环嵌套<br>就得使用3个 break 才能跳出循环，所以在这种情况下我们使用 goto 语句就会更加的快捷</p><h1 id="希望读者们多多三连支持"><a href="#希望读者们多多三连支持" class="headerlink" title="希望读者们多多三连支持"></a>希望读者们多多三连支持</h1><h1 id="小编会持续更新"><a href="#小编会持续更新" class="headerlink" title="小编会持续更新"></a>小编会持续更新</h1><h1 id="你们的鼓励就是我前进的动力！"><a href="#你们的鼓励就是我前进的动力！" class="headerlink" title="你们的鼓励就是我前进的动力！"></a>你们的鼓励就是我前进的动力！</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/60692ff12e67dca25120f3622ddbe14.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.2——C语言数据类型和变量</title>
      <link href="/2024/10/10/C%E8%AF%AD%E8%A8%80/vlog2/"/>
      <url>/2024/10/10/C%E8%AF%AD%E8%A8%80/vlog2/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型的介绍"><a href="#数据类型的介绍" class="headerlink" title="数据类型的介绍"></a>数据类型的介绍</h1><h2 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h2><p>C语言的数据类型多种多样，类型不仅是我们了解数据的开始，也是数据初始化、函数自定义等的操作，编译器只有知道了数据的类型，才能进行相应的操作<br><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/2edd3369e3a5a1ac391287b5394a135.png" alt="在这里插入图片描述"></p><p><strong>字符型</strong>：char、[signed] char（有符号字符）、[unsigned] char（无符号字符）</p><p><strong>整型</strong>：int、[signed] int、unsigned int<br><strong>短整型</strong>：short [int]、[signed] short [int]、unsigned int [int]<br><strong>长整型</strong>：long [int]、[signed] long [int]、unsigned long [int]<br><strong>更长的整型</strong>：long long [int]、[signed] long long [int]、unsigned long long [int]</p><p><strong>浮点型</strong>：float、double、long double</p><p><strong>布尔类型</strong>：布尔类型本不是专门的类型，后来为了表示真假，引入了布尔类型_Bool或bool，使用布尔类型必须包含头文件#include &lt;stdbool.h&gt;,布尔类型返回的是<strong>true或false</strong>，表示真假</p><p>注意每种类型的数据都有自己的长度，存储的数据范围有所差异，这里就不过多赘述（详情可看<a href="https://legacy.cplusplus.com/%EF%BC%89">https://legacy.cplusplus.com/）</a></p><h2 id="sizeof操作符"><a href="#sizeof操作符" class="headerlink" title="sizeof操作符"></a>sizeof操作符</h2><p>sizeof是一个关键字，也是个操作符，用于计算操作符数的类型长度，单位是字节<br>sizeof有两种计算方式：<strong>sizeof（类型）、sizeof 表达式</strong><br>这里要注意的是sizeof后边的表达式是不参与真实运算的，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">​</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> result = <span class="keyword">sizeof</span>(num + <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 这里 num + 20 并不会真正进行加法运算，只是根据 num 的类zd型（int）来确定大小。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Size of num + 20: %zd\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显而易见这里输出的result的值应为4，在VS2022的X64环境下，常见的int为4个字节，char为1个字节，这里只是根据其类型得出是4个字节。而且sizeof需要用%zd（无符号整型）来打印，sizeof的计算结果是<strong>size_t类型</strong>的。</p><p>sizeof 运算符的返回值，C 语言只规定是<strong>无符号整数</strong>，并没有规定具体的类型，而是留给系统自己去决定， sizeof 到底返回什么类型。不同的系统中，返回值的类型有可能是unsigned int ，也有可能是 unsigned long ，甚至是 unsigned long long ，对应的 printf() 占位符分别是 %u 、 %lu 和 %llu 。这样不利于程序的可移植性。C 语言提供了⼀个解决方法，创造了⼀个类型别名 size_t ，用来统⼀表示 sizeof 的返回值类型。对应当前系统的 sizeof 的返回值类型，可能是 unsigned int ，也可能是unsigned long long</p><h2 id="signed和unsigned"><a href="#signed和unsigned" class="headerlink" title="signed和unsigned"></a>signed和unsigned</h2><p>signed表示一个类型带有正负号，unsigned表示一个类型不带有正负号，也就是正整数，所以对于int来说完整的写法应该是signed int，只不过平常忽略不写，但写了也不算错</p><p>int 类型也可以不带正负号，只表示非负整数，这时就必须使用关键字unsigned声明变量。unsigned int里面的int可以省略，也就是可以写成unsigned，字符char也存在signed、unsigned</p><p>值得注意的是C语言规定char是否默认带有正负号由当前系统决定，这就是说，char 不等同于 signed char ，它有可能是 signed char ，也有可能是unsigned char </p><h1 id="变量的介绍"><a href="#变量的介绍" class="headerlink" title="变量的介绍"></a>变量的介绍</h1><h2 id="创建与初始化"><a href="#创建与初始化" class="headerlink" title="创建与初始化"></a>创建与初始化</h2><p>我们都知道变化的量叫变量，不变的称为常量，创建形式为<strong>data_type name</strong>，第一个为数据类型，第二个为变量名，例如int a &#x3D; 10，在变量在创建的时候就给⼀个初始值，这就叫初始化</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><strong>全局变量</strong>：在大括号外部定义的变量就是全局变量<br>全局变量的使用范围更广，整个工程中想使用，都是有办法使用的</p><p><strong>局部变量</strong>：在大括号内部定义的变量就是局部变量<br>局部变量的使用范围是比较局限，只能在自己所在的局部范围内使用的</p><p>注意当局部变量和全局变量同名时，<strong>局部变量优先使用</strong></p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>内存中有三个区域：栈区、堆区、静态区</p><ol><li>局部变量是放在内存的栈区</li><li>全局变量是放在内存的静态区</li><li>堆区是用来动态内存管理的（后期会介绍）</li></ol><h1 id="操作符的介绍"><a href="#操作符的介绍" class="headerlink" title="操作符的介绍"></a>操作符的介绍</h1><h2 id="算术操作符：-、-、-、-、"><a href="#算术操作符：-、-、-、-、" class="headerlink" title="算术操作符：+、-、*、&#x2F;、%"></a>算术操作符：+、-、*、&#x2F;、%</h2><p>C语⾔中为了方便运算，提供了⼀系列操作符，其中有⼀组操作符叫：算术操作符。<br>分别是： + - * &#x2F; % ，这些操作符需要两个操作数进行计算的都是<strong>双目操作符</strong>，操作符也叫做<strong>运算符</strong></p><p>用+ 和 - 来完成加法和减法</p><p>运算符 * 用来完成乘法</p><p>运算符 &#x2F; 用来完成除法，除号的两端如果是整数，执行的是整数除法，得到的结果也是整数，<strong>如果运算数中至少有一个float浮点数，就能得到浮点数</strong></p><p>运算符 % 表示求模(余)运算，即返回两个整数相除的余值。这个运算符只能用于整数，不能用于浮点数，<strong>负数求模的规则是，结果的正负号由第⼀个运算数的正负号决定</strong></p><h2 id="赋值操作符：-和复合赋值"><a href="#赋值操作符：-和复合赋值" class="headerlink" title="赋值操作符：&#x3D;和复合赋值"></a>赋值操作符：&#x3D;和复合赋值</h2><p>赋值操作符 &#x3D; 是⼀个随时可以给变量赋值的操作符，要赋的值放在右边。赋值也可以连续赋值，从右向左依次赋值</p><p>对一个数进行自增、自减操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = a+<span class="number">3</span>;</span><br><span class="line">a = a<span class="number">-2</span>;</span><br></pre></td></tr></table></figure><p>用复合赋值的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">3</span>;</span><br><span class="line">a -= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>代码会显得更方便简洁，对以上的算术操作符都适用</p><h2 id="单目操作符：-、–、-、"><a href="#单目操作符：-、–、-、" class="headerlink" title="单目操作符：++、–、+、-"></a>单目操作符：++、–、+、-</h2><p>C语言中还有⼀些操作符只有⼀个操作数，被称<br>为单目操作符。 ++、–、+(正)、-(负) 就是单目操作符</p><p><strong>前置++</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = ++a;<span class="comment">//++的操作数是a，是放在a的前⾯的，就是前置++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a , b);</span><br></pre></td></tr></table></figure><p><strong>计算口诀：先+1，后使用</strong><br>a原来是10，先+1，后a变成了11，再使用就是赋值给b，b得到的也是11，所以计算后，a和b都是11</p><p><strong>后置++</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = a++;<span class="comment">//++的操作数是a，是放在a的后⾯的，就是后置++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a=%d b=%d\n&quot;</span>,a , b);</span><br></pre></td></tr></table></figure><p><strong>计算口诀：先使用，后+1</strong><br>a原来是10，先使用，就是先赋值给b，b得到了10，然后再+1，然后a变成了11，所以直接计算后a是11，b是10</p><p>前置–和后置++与上面同理</p><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><p>以一段代码做例子就明白了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">//a的是int类型, 3.14是double类型，两边的类型不⼀致，编译器会报警告</span></span><br></pre></td></tr></table></figure><p>消除这个警告，就可以使用强制类型转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = (<span class="type">int</span>)<span class="number">3.14</span>;<span class="comment">//意思是将3.14强制类型转换为int类型，这种强制类型转换只取整数部分入代码片</span></span><br></pre></td></tr></table></figure><p>注意强制转化只在万不得已的时候使用</p><h1 id="占位符的介绍及使用"><a href="#占位符的介绍及使用" class="headerlink" title="占位符的介绍及使用"></a>占位符的介绍及使用</h1><p>占位符在printf中这样使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;There are %d apples\n&quot;</span>, <span class="number">3</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里输出There are 3 apples，这样输出语句更能提高程序的稳定性和准确性</p><p>除此之外，还有很多常见的占位符<br>• %c ：字符。<br>• %d ：十进制整数<br>• %f ：小数（包含 float 类型和 double 类型）<br>• %p ：指针（用来打印地址）<br>• %s ：字符串。<br>• %u ：无符号整数<br>• %x ：十六进制整数<br>• %zd ： size_t 类型</p><p><strong>限定宽度</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, <span class="number">123</span>); <span class="comment">// 输出为 &quot;  123&quot;</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> %5d 表示这个占位符的宽度至少为5位。如果不满5位，对应的值的前面会添加空格。输出的值默认是右对齐，即输出内容前面会有空格<br> 如果希望改成左对齐，在输出内容后面添加空格，可以在占位符的 % 的后面插入⼀个 - 号</p><p><strong>总是显示正负号</strong></p><p>默认情况下， printf() 不对正数显示 + 号，只对负数显示 - 号。如果想让正数也输出 + 号，可<br>以在占位符的 % 后面加⼀个 +</p><p><strong>限定小数位数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出 Number is 0.50</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;Number is %.2f\n&quot;</span>, <span class="number">0.5</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果希望小数点后面输出3位（ 0.500 ），占位符就要写成 %.3f<br>也可以和限定宽度结合使用，比如%6.2f，输出为”*<em>0.50”(这里的</em>表示空格）<br>最小宽度和小数位数这两个限定值，都可以用 *代替，通过 printf() 的参数传入</p><p><strong>输出部分字符串</strong></p><p>可以用 %.[m]s 指定输出的长度，其中 [m] 代表⼀个数字，表示所要输出的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出 hello</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%.5s\n&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里输出前五个字符，即“hello”</p><h1 id="scanf函数的介绍"><a href="#scanf函数的介绍" class="headerlink" title="scanf函数的介绍"></a>scanf函数的介绍</h1><p>scanf() 函数用于读取用户的键盘输入<br>程序运行到这个语句时，会停下来，等待用户从键盘输入，输入数据、按下回车键后， scanf() 就会处理用户的输入，将其存入变量</p><p>scanf的使用方法与printf类似</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%f%f&quot;</span>, &amp;i, &amp;j, &amp;x, &amp;y);</span><br></pre></td></tr></table></figure><p>不过scanf需要加取地址符号&amp;（后面会讲）</p><p>注意scanf() 的返回值是一个整数，表示成功读取的变量个数。<br>如果没有读取任何项，或者匹配失败，则返回 0 。<br>如果在成功读取任何数据之前，发生了读取错误或者遇到读取到文件结尾，则返回常量 EOF (-1)</p><h1 id="希望读者们多多三连支持"><a href="#希望读者们多多三连支持" class="headerlink" title="希望读者们多多三连支持"></a>希望读者们多多三连支持</h1><h1 id="小编会持续更新"><a href="#小编会持续更新" class="headerlink" title="小编会持续更新"></a>小编会持续更新</h1><h1 id="你们的鼓励就是我前进的动力！"><a href="#你们的鼓励就是我前进的动力！" class="headerlink" title="你们的鼓励就是我前进的动力！"></a>你们的鼓励就是我前进的动力！</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/e499c20858c89482285baee013c1b66.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我、重生到500年前凭借C语言改变世界科技vlog.1——C语言常见概念</title>
      <link href="/2024/10/08/C%E8%AF%AD%E8%A8%80/vlog1/"/>
      <url>/2024/10/08/C%E8%AF%AD%E8%A8%80/vlog1/</url>
      
        <content type="html"><![CDATA[<p>​</p><h1 id="C语言是什么？和C-有什么区别？"><a href="#C语言是什么？和C-有什么区别？" class="headerlink" title="C语言是什么？和C++有什么区别？"></a>C语言是什么？和C++有什么区别？</h1><p>定义：C 语言是一种通用的、面向过程的计算机编程语言。它最初由丹尼斯・里奇（Dennis Ritchie）在 20 世纪 70 年代初于贝尔实验室开发，用于编写 UNIX 操作系统。C 语言具有高效、简洁、可移植性强等特点。</p><p>简单来说：人和人交流使用的是自然语言，那么计算机语言就是人和计算机交流的桥梁，C语言就是众多计算机语言中的⼀种</p><p>C语言和C++的区别:C++是C语言的plus版，C语言是面向过程的语言，把大象放进冰箱需要多少步？需要三步，打开冰箱门，放入大象，关闭冰箱，这就是面向过程。C++是面向对象的语言，比C语言难，但是直接学习C++也需要接触面向过程的内容，大象的体重？身高？冰箱的尺寸？制冷效率？这就是面向对象的内容。</p><h1 id="编译器的选择和使用"><a href="#编译器的选择和使用" class="headerlink" title="编译器的选择和使用"></a>编译器的选择和使用</h1><p>我们需要把C语言转化成机器能够执行的机器命令，就需要一些编译器的集成开发环境来实现。<br>那我们常见的C语言编译器都有哪些呢？</p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/8857f0d6431ab38cd709e5cb498296d.png" alt="DevC++"></p><p>集成了gcc开发环境，也是学校和一些竞赛常用的，具有小巧灵活的特点，但是对代码风格的养成不太友好，不利于码农写出好看标准的代码，故选择性使用</p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/e65d9b52ab12f4680575f00495919d3.png" alt="Clion"></p><p>集成了CMake开发环境，编译器可以根据个人习惯配置，还是不错的，但介于他是个收费软件，故不做目前推荐使用</p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/7cc95ca71bd8e2d6c6da762a02a578d.png" alt="VS2022"></p><p>集成了MSVC开发环境，安装报包较大一些，安装简单，无需多余配置，企业中也较多使用，中文界面对初学者也很友好,使用起来非常方便，便于培养代码风格，是作者最喜欢用的，故在此推荐使用</p><h1 id="项目、源文件、头文件的介绍"><a href="#项目、源文件、头文件的介绍" class="headerlink" title="项目、源文件、头文件的介绍"></a>项目、源文件、头文件的介绍</h1><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/138971510e0e0be6039199b0bbd6c55.png" alt="在这里插入图片描述"></p><p>安装好VS2022后，我们创建一个空白界面，这就是一个项目</p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/d2b2428fd1f2ce8d8ead0bc68427df7.png" alt="在这里插入图片描述"></p><p>如图所示，以.h结尾的就叫做头文件，以.c结尾的就叫做源文件 </p><p>头文件定义：是一种包含函数声明、变量声明、宏定义和类型定义等内容的文件，通常以.h（在 C、C++ 等编程语言中）为扩展名。</p><p>简单来说就是包含了自定义函数以及编译器自带函数等的文件</p><p>源文件定义：源文件是包含实际函数定义、变量定义等可执行代码的文件，在 C、C++ 等语言中通常以.c或.cpp（C++ 源文件）为扩展名。</p><p>简单来说我们在头文件下创建和执行的代码所在的文件就叫源文件</p><h1 id="main函数、printf函数、库函数的介绍"><a href="#main函数、printf函数、库函数的介绍" class="headerlink" title="main函数、printf函数、库函数的介绍"></a>main函数、printf函数、库函数的介绍</h1><p> main函数</p><p>是程序的入口点。这意味着当程序开始运行时，操作系统会首先调用main函数。 它是整个程序执行的起始位置，就像一场演出的开场节目一样，程序的其他部分都是在main函数的调用或控制下逐步执行的。</p><p>main函数也被叫做主函数，在写”hello world”代码时，前面的int表示函数执行结束时返回的类型，所以在main函数最后写return 0；正好前后呼应，返回一个0（假）使代码停止</p><p>• main函数有且仅有⼀个<br>• 即使⼀个项目中有多个.c文件，但是只能有⼀个main函数（因为程序的入口只能有⼀个）<br>• main后边的()不能漏掉了<br>• 代码中不能使用中文符号，比如括号和分号<br>• 一条语句结束后，有分号<br>printf函数<br>实现代码在屏幕上的打印，printf也是个库函数，printf可以打印各种类型的数据<br>库函数<br>一些代码会被我们重复性的去使用，为了提高程序员的代码开发效率，C语言标准规定了一些函数，由编译器进行实现提供给程序员使用，这些函数组成了一个库就被称为标准库，也叫库函数，库函数一般会声明在头文件中，所以使用库函数要包含对应的头文件</p><h1 id="关键字的介绍"><a href="#关键字的介绍" class="headerlink" title="关键字的介绍"></a>关键字的介绍</h1><p>像int、if、return这类保留名字的符号被称为关键字<br>• 关键字都有特殊的意义，是保留给C语言使用的<br>• 程序员自己在创建标识符的时候是不能和关键字重复的<br>• 关键字也是不能自己创建的。<br>6.字符、字符串、ASC||编码的介绍<br>像a、b、@、&amp;等这些叫做字符，使用单括号将他们括起来<br>像”abcdef”叫做字符串，使用双括号将他们括起来<br>计算机中的数据是以二进制形式存储的，给每个字符都编码一个二进制序列，这个叫做编码，所以出台了一个标准ASC||编码方便相互同通信，敲代码 </p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/74334dbd08f3100de253af978e582e9.png" alt="在这里插入图片描述"></p><p>• 字符A-Z的ASCII码值从65-90<br>• 字符a-z的ASCII码值从97-122<br>• 对应的大小写字符(a和A)的ASCII码值的差值是32<br>• 数字字符0-9的ASCII码值从48-57<br>• 换行\n 的ASCII值是：10<br>• 在这些字符中ASCII码值从0~31 这32个字符是不可打印字符，无法打印在屏幕上观察</p><h1 id="转义字符的介绍"><a href="#转义字符的介绍" class="headerlink" title="转义字符的介绍"></a>转义字符的介绍</h1><p>转义字符其实就是转变代码意思的字符<br>C语言中像这样的转义字符还有一些，具体如下：<br>• ? ：在书写连续多个问号时使用，防止他们被解析成三字母词，在新的编译器上没法验证了。<br>• \ ：用于表示⼀个反斜杠，防止它被解释为⼀个转义序列符。<br>• \a ：警报，这会使得终端发出警报声或出现闪烁，或者两者同时发生。<br>• \b ：退格键，光标回退⼀个字符，但不删除字符。<br>• \f ：换页符，光标移到下一页。在现代系统上，这已经反映不出来了，行为改成类似于 \v 。<br>• \n ：换行符。<br>• \r ：回车符，光标移到同一行的开头。<br>• \t ：制表符，光标移到下⼀个水平制表位，通常是下⼀个4&#x2F;8的倍数。<br>• \ddd ：d d d表示1~3个八进制的数字。 如：\130 表示字符X<br>• \xdd ：d d表示2个⼗六进制数字。 如： \x30 表示字符0<br>• \0 ：null 字符，代表没有内容， \0 就是 \ddd 这类转义字符的⼀种，⽤于字符串的结束标志，其<br>ASCII码值是0</p><h1 id="注释的重要性"><a href="#注释的重要性" class="headerlink" title="注释的重要性"></a>注释的重要性</h1><p>注释是一种对代码的说明，通常在&#x2F;&#x2F;后进行注释，注释后的代码编译器会忽略注释，所以注释是给程序员看的，好的注释可以帮助我们理解代码<br>另一种注释方法将注释放在 &#x2F;<em>…</em>&#x2F; 之间，内部可以分行<br>总的来说写注释提高了代码的可读性，能够描述变量和函数的用途，方便代码的维护<br>希望读者们多多三连支持<br>小编会持续更新<br>你们的鼓励就是我前进的动力！</p><p><img src="https://picture-bed000.oss-cn-shenzhen.aliyuncs.com/76973ea184d17f67b7807a7829d0af4.png" alt="在这里插入图片描述"></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 开发语言 </tag>
            
            <tag> 科技 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
